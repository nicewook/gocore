// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/nicewook/gocore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthUseCase is an autogenerated mock type for the AuthUseCase type
type AuthUseCase struct {
	mock.Mock
}

type AuthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUseCase) EXPECT() *AuthUseCase_Expecter {
	return &AuthUseCase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthUseCase) Login(ctx context.Context, email string, password string) (*domain.LoginResponse, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.LoginResponse, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.LoginResponse); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUseCase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthUseCase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthUseCase_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *AuthUseCase_Login_Call {
	return &AuthUseCase_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *AuthUseCase_Login_Call) Run(run func(ctx context.Context, email string, password string)) *AuthUseCase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthUseCase_Login_Call) Return(_a0 *domain.LoginResponse, _a1 error) *AuthUseCase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUseCase_Login_Call) RunAndReturn(run func(context.Context, string, string) (*domain.LoginResponse, error)) *AuthUseCase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, userID
func (_m *AuthUseCase) Logout(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthUseCase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthUseCase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *AuthUseCase_Expecter) Logout(ctx interface{}, userID interface{}) *AuthUseCase_Logout_Call {
	return &AuthUseCase_Logout_Call{Call: _e.mock.On("Logout", ctx, userID)}
}

func (_c *AuthUseCase_Logout_Call) Run(run func(ctx context.Context, userID int64)) *AuthUseCase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *AuthUseCase_Logout_Call) Return(_a0 error) *AuthUseCase_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthUseCase_Logout_Call) RunAndReturn(run func(context.Context, int64) error) *AuthUseCase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *AuthUseCase) RefreshToken(ctx context.Context, refreshToken string) (*domain.LoginResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.LoginResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.LoginResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUseCase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AuthUseCase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *AuthUseCase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *AuthUseCase_RefreshToken_Call {
	return &AuthUseCase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *AuthUseCase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *AuthUseCase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthUseCase_RefreshToken_Call) Return(_a0 *domain.LoginResponse, _a1 error) *AuthUseCase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUseCase_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (*domain.LoginResponse, error)) *AuthUseCase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SignUpUser provides a mock function with given fields: ctx, user
func (_m *AuthUseCase) SignUpUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUpUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (*domain.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) *domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUseCase_SignUpUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUpUser'
type AuthUseCase_SignUpUser_Call struct {
	*mock.Call
}

// SignUpUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *AuthUseCase_Expecter) SignUpUser(ctx interface{}, user interface{}) *AuthUseCase_SignUpUser_Call {
	return &AuthUseCase_SignUpUser_Call{Call: _e.mock.On("SignUpUser", ctx, user)}
}

func (_c *AuthUseCase_SignUpUser_Call) Run(run func(ctx context.Context, user *domain.User)) *AuthUseCase_SignUpUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *AuthUseCase_SignUpUser_Call) Return(_a0 *domain.User, _a1 error) *AuthUseCase_SignUpUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUseCase_SignUpUser_Call) RunAndReturn(run func(context.Context, *domain.User) (*domain.User, error)) *AuthUseCase_SignUpUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUseCase creates a new instance of AuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUseCase {
	mock := &AuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
