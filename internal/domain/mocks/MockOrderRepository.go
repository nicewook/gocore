// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/nicewook/gocore/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

type OrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepository) EXPECT() *OrderRepository_Expecter {
	return &OrderRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with no fields
func (_m *OrderRepository) GetAll() ([]domain.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type OrderRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *OrderRepository_Expecter) GetAll() *OrderRepository_GetAll_Call {
	return &OrderRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *OrderRepository_GetAll_Call) Run(run func()) *OrderRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderRepository_GetAll_Call) Return(_a0 []domain.Order, _a1 error) *OrderRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetAll_Call) RunAndReturn(run func() ([]domain.Order, error)) *OrderRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *OrderRepository) GetByID(id int64) (*domain.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type OrderRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int64
func (_e *OrderRepository_Expecter) GetByID(id interface{}) *OrderRepository_GetByID_Call {
	return &OrderRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *OrderRepository_GetByID_Call) Run(run func(id int64)) *OrderRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *OrderRepository_GetByID_Call) Return(_a0 *domain.Order, _a1 error) *OrderRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_GetByID_Call) RunAndReturn(run func(int64) (*domain.Order, error)) *OrderRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: order
func (_m *OrderRepository) Save(order *domain.Order) (*domain.Order, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Order) (*domain.Order, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(*domain.Order) *domain.Order); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OrderRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - order *domain.Order
func (_e *OrderRepository_Expecter) Save(order interface{}) *OrderRepository_Save_Call {
	return &OrderRepository_Save_Call{Call: _e.mock.On("Save", order)}
}

func (_c *OrderRepository_Save_Call) Run(run func(order *domain.Order)) *OrderRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Order))
	})
	return _c
}

func (_c *OrderRepository_Save_Call) Return(_a0 *domain.Order, _a1 error) *OrderRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepository_Save_Call) RunAndReturn(run func(*domain.Order) (*domain.Order, error)) *OrderRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
